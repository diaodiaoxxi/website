(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{606:function(e,t,r){"use strict";r.r(t);var a=r(22),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"mvc、mvp、mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp、mvvm"}},[e._v("#")]),e._v(" MVC、MVP、MVVM")]),e._v(" "),r("h2",{attrs:{id:"谈谈对-mvc、mvp、mvvm-模式的理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对-mvc、mvp、mvvm-模式的理解"}},[e._v("#")]),e._v(" 谈谈对 MVC、MVP、MVVM 模式的理解")]),e._v(" "),r("h3",{attrs:{id:"mvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),r("p",[e._v("MVC 除了把应用程序分为 View、Model 层，还额外的加了一个 Controller 层， 它的职责是进行 Model 和 View 之间的协作(路由、输入预处理等)的应由逻 辑(application logic);Model 进行处理业务逻辑。\n用户对 View 操作以后，View 捕获到这个操作，会把处理的权利交移给\nController(Pass calls);Controller 会对来自 View 数据进行预处理、决定调\n用哪个 Model 的接口;然后由 Model 执行相关的业务逻辑;当 Model 变更\n了以后，会通过观察者模式(Observer Pattern)通知 View;View 通过观察者\n模式收到 Model 变更的消息以后，会向 Model 请求最新的数据，然后重新更 新界面。")]),e._v(" "),r("h3",{attrs:{id:"mvp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" MVP")]),e._v(" "),r("p",[e._v("和 MVC 模式一样，用户对 View 的操作都会从 View 交易给 Presenter。 Presenter 会执行相应的应用程序逻辑，并且会对 Model 进行相应的操作;而 这时候 Model 执行业务逻辑以后，也是通过观察者模式把自己变更的消息传递 出去，但是是传给 Presenter 而不是 View。Presenter 获取到 Model 变更的消 息以后，通过 View 提供的接口更新界面")]),e._v(" "),r("h3",{attrs:{id:"mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),r("p",[e._v("MVVM 可以看做是一种特殊的 MVP(Passive View)模式，或者说是对 MVP 模 式的一种改良。\nMVVM 代表的是 Model-View-ViewModel，可以简单把 ViewModel 理解为页 面上所显示内容的数据抽象，和 Domain Model 不一样，ViewModel 更适合用 来描述 View。 MVVM 的依赖关系和 MVP 依赖关系一致，只不过是把 P 换 成了 VM。")]),e._v(" "),r("p",[e._v("MVVM 的调用关系:")]),e._v(" "),r("p",[e._v("MVVM 的调用关系和 MVP 一样。但是，在 ViewModel 当中会有一个叫 Binder，或者是 Data-binding engine 的东西。以前全部由 Presenter 负责的 View 和 Model 之间数据同步操作交由给 Binder 处理。你只需要在 View 的 模板语法当中，指令式声明 View 上的显示的内容是和 Model 的哪一块数据绑 定的。当 ViewModel 对进行 Model 更新的时候，Binder 会自动把数据更新 到 View 上，当用户对 View 进行操作(例如表单输入)，Binder 也会自动把\n数据更新到 Model 上。这种方式称为:Two-way data-binding，双向数据绑定。 可以简单而不恰当地理解为一个模板引擎，但是会根据数据变更实时渲染")])])}),[],!1,null,null,null);t.default=i.exports}}]);