(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{634:function(v,_,t){"use strict";t.r(_);var l=t(22),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"tcp协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[v._v("#")]),v._v(" TCP协议")]),v._v(" "),t("h2",{attrs:{id:"一个数据包的-旅程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个数据包的-旅程"}},[v._v("#")]),v._v(" 一个数据包的“旅程”")]),v._v(" "),t("p",[v._v("互联网中的数据是通过"),t("code",[v._v("数据包")]),v._v("来传输的。如果发送的数据很大，那么该数据就会被"),t("code",[v._v("拆分为很多小数据包")]),v._v("来传输\n互联网上不同的在线设备都有唯一的地址，地址只是一个数字\n计算机的地址就称为 "),t("code",[v._v("IP")]),v._v(" 地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息")]),v._v(" "),t("h2",{attrs:{id:"udp：把数据包送达应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp：把数据包送达应用程序"}},[v._v("#")]),v._v(" UDP：把数据包送达应用程序")]),v._v(" "),t("p",[v._v("IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP通过"),t("code",[v._v("端口号")]),v._v("把数据包分发给正确的程序。\nUDP"),t("code",[v._v("不提供重发机制")]),v._v("\nUDP 不能保证数据可靠性，但是传输速度却非常快\n端口号: 目标端口号、本机端口号")]),v._v(" "),t("p",[v._v("特点：")]),v._v(" "),t("ul",[t("li",[v._v("面向报文的")])]),v._v(" "),t("p",[v._v("UDP是一个面向报文（报文可以理解为一段段的数据）的协议")]),v._v(" "),t("ul",[t("li",[v._v("不可靠性")])]),v._v(" "),t("p",[v._v("UDP 是无连接的，也就是说通信不需要建立和断开连接。\nUDP 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的\nUDP "),t("code",[v._v("没有拥塞控制")]),v._v("，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。")]),v._v(" "),t("ul",[t("li",[v._v("高效\n因为 UDP 没有 TCP 那么复杂，需要保证数据不丢失且有序到达。所以 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。")])]),v._v(" "),t("p",[v._v("缺点：")]),v._v(" "),t("ul",[t("li",[v._v("数据包在传输过程中容易丢失；")]),v._v(" "),t("li",[v._v("大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。")])]),v._v(" "),t("h2",{attrs:{id:"tcp协议-传输控制协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议-传输控制协议"}},[v._v("#")]),v._v(" TCP协议 传输控制协议")]),v._v(" "),t("p",[t("code",[v._v("面向连接的，可靠的，基于字节流的传输层的通信协议")]),v._v("；解决了如何保证页面文件能被完整送达浏览器")]),v._v(" "),t("ul",[t("li",[v._v("针对数据包丢失的问题，TCP提供"),t("code",[v._v("重传机制")])]),v._v(" "),t("li",[v._v("针对"),t("code",[v._v("数据包排序机制")]),v._v("，保证把乱序的数据包整合成完整的文件")])]),v._v(" "),t("p",[v._v("tcp存在数据包传输过程中的 "),t("code",[v._v("队头阻塞")]),v._v(" 问题")]),v._v(" "),t("p",[v._v("生命周期：建立连接、传输数据、断开连接")]),v._v(" "),t("p",[v._v("SYN简称就是 同步序列号")]),v._v(" "),t("p",[v._v("SYN: 当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。\nACK: 该字段为一表示确认号字段有效\nFIN: 该字段为一表示此报文段是一个释放连接的请求报文")]),v._v(" "),t("ul",[t("li",[v._v("建立连接阶段（三次握手）")])]),v._v(" "),t("p",[v._v("一句话概括:确认双方的接收与发送能力是否正常。(双方是否都处于可 响应的状态)")]),v._v(" "),t("p",[v._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误；网络中存在延迟的重复分组")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("三次握手才可以阻止重复历史连接的初始化（主要原因）；为了防止旧的重复连接初始化造成混乱")])]),v._v(" "),t("li",[t("p",[v._v("三次握手才可以同步双方的初始序列号\nTCP 协议的通信双方， 都必须维护一个「序列号」"),t("code",[v._v("Seq Number")]),v._v("， 序列号是可靠传输的一个关键因素，它的作用：")]),v._v(" "),t("ul",[t("li",[v._v("接收方可以去除重复的数据；")]),v._v(" "),t("li",[v._v("接收方可以根据数据包的序列号按序接收；")]),v._v(" "),t("li",[v._v("可以标识发送出去的数据包中， 哪些是已经被对方收到的")])])]),v._v(" "),t("li",[t("p",[v._v("三次握手才可以避免资源浪费")])])]),v._v(" "),t("ul",[t("li",[v._v("传输数据阶段")])]),v._v(" "),t("p",[t("code",[v._v("接收端需要对每个数据包进行确认操作")]),v._v("，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端\n当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为"),t("code",[v._v("数据包丢失")]),v._v("，并触发发送端的"),t("code",[v._v("重发机制")]),v._v("\n一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照 "),t("code",[v._v("TCP 头中的序号为其排序")]),v._v("，从而保证组成完整的数据")]),v._v(" "),t("ul",[t("li",[v._v("断开连接阶段（四次挥手）")])]),v._v(" "),t("ol",[t("li",[v._v("当客户端将信息（请求头、请求主体……）传给服务器之后，它就立马通知 服务器端 我准备要关闭连接通道了")]),v._v(" "),t("li",[v._v("由于数据传输的内容相对过大且准备数据传输内容需要时间，\n"),t("ul",[t("li",[v._v("服务器端无法第一时间将数据传输给客户端，")]),v._v(" "),t("li",[v._v("但是它需要告诉客户端一声：我知道了，你等我把数据内容传输给你后就断开连接吧。（立即回答）")])])]),v._v(" "),t("li",[v._v("服务器端 将 客户端请求的数据返回给客户端，同时，服务器再告诉客户端：你要的东西我都给你了 FIN=1")]),v._v(" "),t("li",[v._v("客户端收到数据后，告诉服务器端：你给我的东西我收到了，那我断开连接了，再见 ACK=1")])]),v._v(" "),t("h2",{attrs:{id:"tcp-和-udp-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-区别"}},[v._v("#")]),v._v(" TCP 和 UDP 区别")]),v._v(" "),t("p",[v._v("TCP 的可靠性含义： 接收方收到的数据是完整， 有序， 无差错的。\nUDP 不可靠性含义： 接收方接收到的数据可能存在部分丢失， 顺序也不一定能保证。")]),v._v(" "),t("ol",[t("li",[v._v("连接\nTCP 是面向连接的传输层协议，传输数据前先要建立连接。\nUDP 是不需要连接，即刻传输数据。")]),v._v(" "),t("li",[v._v("服务对象\nTCP 是一对一的两点服务，即一条连接只有两个端点。\nUDP 支持一对一、一对多、多对多的交互通信")]),v._v(" "),t("li",[v._v("可靠性\nTCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。\nUDP 是尽最大努力交付，不保证可靠交付数据。")]),v._v(" "),t("li",[v._v("拥塞控制、流量控制\nTCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\nUDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。")]),v._v(" "),t("li",[v._v("首部开销\nTCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\nUDP 首部只有 8 个字节，并且是固定不变的，开销较小。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);