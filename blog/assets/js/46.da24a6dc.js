(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{513:function(t,e,a){t.exports=a.p+"assets/img/computed.99458f2f.png"},603:function(t,e,a){"use strict";a.r(e);var s=a(22),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),s("h2",{attrs:{id:"为什么需要异步渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要异步渲染"}},[t._v("#")]),t._v(" 为什么需要异步渲染")]),t._v(" "),s("ul",[s("li",[t._v("用户体验角度，如果频繁的触发渲染，会出现页面闪动，造成不好的用户体验")]),t._v(" "),s("li",[t._v("页面性能角度，若根据每行数据变化，出发页面重新渲染，会造成大量不必要的页面重绘渲染或者重排渲染，造成低效的页面性能，甚至造成页面的卡顿。造成CPU、GPU的浪费")]),t._v(" "),s("li",[t._v("将多次数据变化所引起的响应变化收集后合并成一次页面渲染，从而更合理的利用机器资源，提升性能与用户体验")])]),t._v(" "),s("h2",{attrs:{id:"vue-双向数据绑定原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-双向数据绑定原理"}},[t._v("#")]),t._v(" Vue 双向数据绑定原理")]),t._v(" "),s("p",[t._v("vue主要通过双向绑定来实现 view 和 model 的同步更新。Vue的双向数据绑定主要是通过对数据的的劫持和发布订阅者模式来实现的")]),t._v(" "),s("p",[t._v("首先我们通过Object.defineProperty()方法来对 Model 数据各个属性添加访问器属性，以此来实现数据的劫持，因此当 Model 中的数据发生变化的时候，我们可以通过配置的 setter 和 getter 方法来实现对 View 层数据更新的通知")]),t._v(" "),s("p",[t._v("对于View 层数据更新的通知，我们使用了发布订阅者模式，通过对 model 层每个属性通过在 Object.defineProperty() 方法的 getter 方法创建Dep订阅器进行依赖收集相关联的 Watcher订阅者，当 Model 层数据发生改变的时候，就会通过 Object.defineProperty() 方法的 setter 方法对订阅者进行更新通知 notify，订阅者watcher在接收到更新通知后，做出相应的操作")]),t._v(" "),s("p",[t._v("Dep：扮演观察目标的角色，每一个数据都会有Dep类实例，它内部有个subs队列，subs就是subscribers的意思，保存着依赖本数据的观察者，当本数据变更时，调用dep.notify()通知观察者")]),t._v(" "),s("p",[t._v("Watcher：扮演观察者的角色，进行观察者函数的包装处理。如render()函数，会被进行包装成一个Watcher实例")]),t._v(" "),s("p",[t._v("Observer：辅助的可观测类，数组/对象通过它的转化，可成为可观测数据")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dep")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  subs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("watcher1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" watcher2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),t._v(" "),s("h2",{attrs:{id:"computed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" computed")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("缓存（惰性）计算属性")])]),t._v(" "),s("li",[s("p",[t._v("在计算属性中相关data变量值发生变化时，当前data属性依赖收集Dep中的订阅者watcher会依次触发 update 方法，如果当前watcher 中 lazy为true，则将其 dirty = true；")])]),t._v(" "),s("li",[s("p",[t._v("取值的时候会执行"),s("code",[t._v("createComputedGetter")]),t._v("方法返回一个"),s("code",[t._v("computedGetter")]),t._v("函数来，里面会对计算属性的watcher中"),s("code",[t._v("dirty")]),t._v("进行判断；当为true时，watcher才会去执行计算属性进行求值，本质就是 get()")])]),t._v(" "),s("li",[s("p",[t._v("在求值完成后就会把dirty改为false，如果在取值时dirty为false就会直接将值返回。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(513),alt:"avatar"}})])])]),t._v(" "),s("h2",{attrs:{id:"nexttick怎么劫持的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexttick怎么劫持的"}},[t._v("#")]),t._v(" nextTick怎么劫持的")]),t._v(" "),s("ul",[s("li",[t._v("运用 浏览器 事件循环机制 来实现的")]),t._v(" "),s("li",[t._v("js是单线程运行的，但是在主线程之外，有一个 "),s("code",[t._v("任务队列")]),t._v("，当主线程执行完毕后，会执行 任务队列 中的 事件")]),t._v(" "),s("li",[t._v("任务队列中事件分为 宏任务、微任务")]),t._v(" "),s("li",[t._v("Vue的dom更新是异步执行的，当侦听到数据变化时，vue会开启一个队列 callbacks，当如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。")]),t._v(" "),s("li",[t._v("然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作")]),t._v(" "),s("li",[t._v("Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替")]),t._v(" "),s("li",[t._v("nextTick中的calllback会被放入到 vue自身的任务队列中")])]),t._v(" "),s("p",[t._v("注意点：当我们在执行某个方法时，nextTick通常是用来操作更新后的dom，若我们在操作数据之前调用nextTick，即nextTick放在首位，则会失效。因为nextTick、vue监听到数据变化，都会将其dom更新的回调函数 push到 vue自身的队列中，但是是推入的先后顺序，尤为重要若nextick回调优先于数据更新需要执行的回调操作，则拿到的dom不是更新后的dom，同理考虑 new Promise()情况")]),t._v(" "),s("h2",{attrs:{id:"vue-是如何对数组方法进行变异的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-是如何对数组方法进行变异的"}},[t._v("#")]),t._v(" vue 是如何对数组方法进行变异的")]),t._v(" "),s("p",[s("code",[t._v("push pop shift unshift sort splice reverse")]),t._v("\n本质上，对数组的原型方法进行的重写，获取当前数组的ob对象，即observer对象，"),s("code",[t._v("const ob = this.__ob__;")]),t._v("，如果有新的值，就进行observeArray 对新的值进行监听,然后手动调用 notify,通知 render watcher,执行 update")]),t._v(" "),s("h2",{attrs:{id:"vm-set-实现原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vm-set-实现原理是什么"}},[t._v("#")]),t._v(" vm.$set()实现原理是什么")]),t._v(" "),s("ul",[s("li",[t._v("target是数组，vue通过splice来实现响应式")]),t._v(" "),s("li",[t._v("target为对象, key在target或者target.prototype上 且必须不能在 Object.prototype 上,直接赋值")]),t._v(" "),s("li",[t._v("如果 target 本身就不是响应式,创建一个全新的属性，直接赋值")]),t._v(" "),s("li",[t._v("如果target是响应式的，但属性不是响应式,则调用 defineReactive 方法进行响应式处理")])]),t._v(" "),s("h2",{attrs:{id:"vue-loader是什么？使用它的用途有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-loader是什么？使用它的用途有哪些？"}},[t._v("#")]),t._v(" vue-loader是什么？使用它的用途有哪些？")]),t._v(" "),s("p",[t._v("Vue文件的一个加载器，用与开发过程中使用，将template/js/style转换成js模块。")]),t._v(" "),s("h2",{attrs:{id:"vue-spa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-spa"}},[t._v("#")]),t._v(" Vue SPA")]),t._v(" "),s("p",[t._v("SAP仅在浏览器初次加载页面的html,js，css等资源文件，SPA 不会因为用户的操作而进行页面的重新加载或跳转，用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。")]),t._v(" "),s("ul",[s("li",[t._v("用户体验好，快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；")]),t._v(" "),s("li",[t._v("SPA 相对对服务器压力小")]),t._v(" "),s("li",[t._v("前后端分离")])]),t._v(" "),s("h2",{attrs:{id:"vue-ssr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-ssr"}},[t._v("#")]),t._v(" Vue SSR")]),t._v(" "),s("p",[t._v("SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染")]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("更好的 SEO")]),t._v("： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；")]),t._v(" "),s("li",[s("code",[t._v("更快的内容到达时间（首屏加载更快）")]),t._v("： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间")])])])}),[],!1,null,null,null);e.default=v.exports}}]);